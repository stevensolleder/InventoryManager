// <auto-generated />
using System;
using InventoryManager.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventoryManager.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("InventoryManager.Model.Category", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<uint?>("ItemId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("InventoryManager.Model.DataFile", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint?>("ItemId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("DataFiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DataFile");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("InventoryManager.Model.Item", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint?>("RoomId")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("InventoryManager.Model.Room", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("InventoryManager.Model.ImageDataFile", b =>
                {
                    b.HasBaseType("InventoryManager.Model.DataFile");

                    b.Property<uint>("Height")
                        .HasColumnType("int unsigned");

                    b.Property<uint?>("ItemId1")
                        .HasColumnType("int unsigned");

                    b.Property<string>("PreviewFileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("PreviewHeight")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("PreviewWidth")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("Width")
                        .HasColumnType("int unsigned");

                    b.HasIndex("ItemId1");

                    b.HasDiscriminator().HasValue("ImageDataFile");
                });

            modelBuilder.Entity("InventoryManager.Model.Category", b =>
                {
                    b.HasOne("InventoryManager.Model.Item", null)
                        .WithMany("Categories")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("InventoryManager.Model.DataFile", b =>
                {
                    b.HasOne("InventoryManager.Model.Item", null)
                        .WithMany("AdditionalFiles")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("InventoryManager.Model.Item", b =>
                {
                    b.HasOne("InventoryManager.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("InventoryManager.Model.ImageDataFile", b =>
                {
                    b.HasOne("InventoryManager.Model.Item", null)
                        .WithMany("Images")
                        .HasForeignKey("ItemId1");
                });

            modelBuilder.Entity("InventoryManager.Model.Item", b =>
                {
                    b.Navigation("AdditionalFiles");

                    b.Navigation("Categories");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
